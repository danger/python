{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "BitBucketCloudCommit": {
            "description": "A BitBucketCloud specific implementation of a git commit.",
            "properties": {
                "author": {
                    "description": "The author of the commit, assumed to be the person who wrote the code.",
                    "properties": {
                        "raw": {
                            "description": "Format: `Foo Bar <foo@bar.com>`",
                            "type": "string"
                        },
                        "user": {
                            "$ref": "#/definitions/BitBucketCloudUser"
                        }
                    },
                    "type": "object"
                },
                "date": {
                    "description": "When the commit was commited to the project, in ISO 8601 format",
                    "type": "string"
                },
                "hash": {
                    "description": "The SHA for the commit",
                    "type": "string"
                },
                "links": {
                    "$ref": "#/definitions/BitBucketCloudCommitsLinks",
                    "description": "The commit's links"
                },
                "message": {
                    "description": "The commit's message",
                    "type": "string"
                },
                "parents": {
                    "description": "The commit's parents",
                    "items": {
                        "properties": {
                            "hash": {
                                "description": "The full SHA",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BitBucketCloudContent": {
            "properties": {
                "html": {
                    "type": "string"
                },
                "markup": {
                    "type": "string"
                },
                "raw": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "rendered"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BitBucketCloudJSONDSL": {
            "properties": {
                "activities": {
                    "description": "The activities such as OPENING, CLOSING, MERGING or UPDATING a pull request",
                    "items": {
                        "$ref": "#/definitions/BitBucketCloudPRActivity"
                    },
                    "type": "array"
                },
                "comments": {
                    "description": "The comments on the pull request",
                    "items": {
                        "$ref": "#/definitions/BitBucketCloudPRComment"
                    },
                    "type": "array"
                },
                "commits": {
                    "description": "The commits associated with the pull request",
                    "items": {
                        "$ref": "#/definitions/BitBucketCloudCommit"
                    },
                    "type": "array"
                },
                "metadata": {
                    "$ref": "#/definitions/RepoMetaData",
                    "description": "The pull request and repository metadata"
                },
                "pr": {
                    "$ref": "#/definitions/BitBucketCloudPRDSL",
                    "description": "The PR metadata"
                }
            },
            "type": "object"
        },
        "BitBucketCloudCommitsLinks": {
            "properties": {
                "html": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "BitBucketCloudPRLinks": {
            "properties": {
                "html": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "self": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "BitBucketCloudCompletePRLinks": {
            "properties": {
                "activity": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "approve": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "comments": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "commits": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "decline": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "diff": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "html": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "merge": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "self": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "statuses": {
                    "properties": {
                        "href": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "BitBucketCloudMergeRef": {
            "properties": {
                "branch": {
                    "properties": {
                        "name": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "commit": {
                    "properties": {
                        "hash": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "repository": {
                    "$ref": "#/definitions/BitBucketCloudRepo"
                }
            },
            "type": "object"
        },
        "BitBucketCloudPRActivity": {
            "properties": {
                "comment": {
                    "$ref": "#/definitions/BitBucketCloudPRComment"
                },
                "pull_request": {
                    "properties": {
                        "id": {
                            "type": "number"
                        },
                        "title": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "BitBucketCloudPRComment": {
            "properties": {
                "content": {
                    "$ref": "#/definitions/BitBucketCloudContent"
                },
                "created_on": {
                    "description": "When the comment was created, in ISO 8601 format",
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "id": {
                    "type": "number"
                },
                "inline": {
                    "properties": {
                        "from": {
                            "type": "number"
                        },
                        "path": {
                            "type": "string"
                        },
                        "to": {
                            "type": [
                                "null",
                                "number"
                            ]
                        }
                    },
                    "type": "object"
                },
                "links": {
                    "$ref": "#/definitions/BitBucketCloudPRLinks"
                },
                "pullrequest": {
                    "properties": {
                        "id": {
                            "type": "number"
                        },
                        "links": {
                            "$ref": "#/definitions/BitBucketCloudPRLinks"
                        },
                        "title": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "type": {
                    "type": "string"
                },
                "updated_on": {
                    "description": "When the comment was updated, in ISO 8601 format",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/BitBucketCloudUser"
                }
            },
            "type": "object"
        },
        "BitBucketCloudPRDSL": {
            "properties": {
                "author": {
                    "$ref": "#/definitions/BitBucketCloudUser",
                    "description": "The creator of the PR"
                },
                "created_on": {
                    "description": "Date PR created as number of milliseconds since the unix epoch",
                    "type": "number"
                },
                "description": {
                    "description": "The text describing the PR",
                    "type": "string"
                },
                "destination": {
                    "$ref": "#/definitions/BitBucketCloudMergeRef",
                    "description": "The PR's destination"
                },
                "id": {
                    "description": "The PR's ID",
                    "type": "number"
                },
                "links": {
                    "$ref": "#/definitions/BitBucketCloudCompletePRLinks",
                    "description": "Misc links for hypermedia conformance"
                },
                "participants": {
                    "description": "People who have participated in the PR",
                    "items": {
                        "$ref": "#/definitions/BitBucketCloudPRParticipant"
                    },
                    "type": "array"
                },
                "reviewers": {
                    "description": "People requested as reviewers",
                    "items": {
                        "$ref": "#/definitions/BitBucketCloudUser"
                    },
                    "type": "array"
                },
                "source": {
                    "$ref": "#/definitions/BitBucketCloudMergeRef",
                    "description": "The PR's source, The repo Danger is running on"
                },
                "state": {
                    "description": "The pull request's current status.",
                    "enum": [
                        "DECLINED",
                        "MERGED",
                        "OPEN",
                        "SUPERSEDED"
                    ],
                    "type": "string"
                },
                "title": {
                    "description": "Title of the pull request.",
                    "type": "string"
                },
                "updated_on": {
                    "description": "Date PR updated as number of milliseconds since the unix epoch",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "BitBucketCloudPRParticipant": {
            "properties": {
                "approved": {
                    "description": "Did they approve of the PR?",
                    "type": "boolean"
                },
                "role": {
                    "description": "How did they contribute",
                    "enum": [
                        "PARTICIPANT",
                        "REVIEWER"
                    ],
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/BitBucketCloudUser"
                }
            },
            "type": "object"
        },
        "BitBucketCloudRepo": {
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BitBucketCloudUser": {
            "properties": {
                "account_id": {
                    "description": "The acount id of the commit author",
                    "type": "string"
                },
                "display_name": {
                    "description": "The display name of the commit author",
                    "type": "string"
                },
                "nickname": {
                    "description": "The nick name of the commit author",
                    "type": "string"
                },
                "uuid": {
                    "description": "The uuid of the commit author",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BitBucketServerCommit": {
            "description": "A BitBucketServer specific implementation of a git commit.",
            "properties": {
                "author": {
                    "description": "The author of the commit, assumed to be the person who wrote the code.",
                    "properties": {
                        "displayName": {
                            "description": "The display name of the commit author",
                            "type": "string"
                        },
                        "emailAddress": {
                            "description": "The email of the commit author",
                            "type": "string"
                        },
                        "name": {
                            "description": "The id of the commit author",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "authorTimestamp": {
                    "description": "The UNIX timestamp for when the commit was authored",
                    "type": "number"
                },
                "committer": {
                    "description": "The author of the commit, assumed to be the person who commited/merged the code into a project.",
                    "properties": {
                        "displayName": {
                            "description": "The display name of the commit committer",
                            "type": "string"
                        },
                        "emailAddress": {
                            "description": "The email of the commit committer",
                            "type": "string"
                        },
                        "name": {
                            "description": "The id of the commit committer",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "committerTimestamp": {
                    "description": "When the commit was commited to the project",
                    "type": "number"
                },
                "displayId": {
                    "description": "The shortened SHA for the commit",
                    "type": "string"
                },
                "id": {
                    "description": "The SHA for the commit",
                    "type": "string"
                },
                "message": {
                    "description": "The commit's message",
                    "type": "string"
                },
                "parents": {
                    "description": "The commit's parents",
                    "items": {
                        "properties": {
                            "displayId": {
                                "description": "The simplified sha",
                                "type": "string"
                            },
                            "id": {
                                "description": "The full SHA",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "BitBucketServerJSONDSL": {
            "properties": {
                "activities": {
                    "description": "The activities such as OPENING, CLOSING, MERGING or UPDATING a pull request",
                    "items": {
                        "$ref": "#/definitions/BitBucketServerPRActivity"
                    },
                    "type": "array"
                },
                "comments": {
                    "description": "The comments on the pull request",
                    "items": {
                        "$ref": "#/definitions/BitBucketServerPRActivity"
                    },
                    "type": "array"
                },
                "commits": {
                    "description": "The commits associated with the pull request",
                    "items": {
                        "$ref": "#/definitions/BitBucketServerCommit"
                    },
                    "type": "array"
                },
                "issues": {
                    "description": "The related JIRA issues",
                    "items": {
                        "$ref": "#/definitions/JIRAIssue"
                    },
                    "type": "array"
                },
                "metadata": {
                    "$ref": "#/definitions/RepoMetaData",
                    "description": "The pull request and repository metadata"
                },
                "pr": {
                    "$ref": "#/definitions/BitBucketServerPRDSL",
                    "description": "The PR metadata"
                }
            },
            "type": "object"
        },
        "BitBucketServerLinks": {
            "enum": [
                "clone",
                "self"
            ],
            "type": "string"
        },
        "BitBucketServerMergeRef": {
            "properties": {
                "displayId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "latestCommit": {
                    "type": "string"
                },
                "repository": {
                    "$ref": "#/definitions/BitBucketServerRepo"
                }
            },
            "type": "object"
        },
        "BitBucketServerPRActivity": {
            "properties": {
                "action": {
                    "enum": [
                        "COMMENTED",
                        "DECLINED",
                        "MERGED",
                        "OPENED",
                        "UPDATED"
                    ],
                    "type": "string"
                },
                "comment": {
                    "$ref": "#/definitions/BitBucketServerPRComment"
                },
                "commentAction": {
                    "enum": [
                        "ADDED",
                        "UPDATED"
                    ],
                    "type": "string"
                },
                "commentAnchor": {
                    "properties": {
                        "diffType": {
                            "enum": [
                                "COMMIT",
                                "EFFECTIVE",
                                "RANGE",
                                "REQUIRED"
                            ],
                            "type": "string"
                        },
                        "fileType": {
                            "enum": [
                                "FROM",
                                "TO"
                            ],
                            "type": "string"
                        },
                        "fromHash": {
                            "type": "string"
                        },
                        "line": {
                            "type": "number"
                        },
                        "lineType": {
                            "enum": [
                                "ADDED",
                                "CONTEXT",
                                "REMOVED"
                            ],
                            "type": "string"
                        },
                        "path": {
                            "type": "string"
                        },
                        "srcPath": {
                            "type": "string"
                        },
                        "toHash": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "createdDate": {
                    "type": "number"
                },
                "id": {
                    "type": "number"
                },
                "user": {
                    "$ref": "#/definitions/BitBucketServerUser"
                }
            },
            "type": "object"
        },
        "BitBucketServerPRComment": {
            "properties": {
                "author": {
                    "$ref": "#/definitions/BitBucketServerUser"
                },
                "comments": {
                    "items": {
                        "$ref": "#/definitions/BitBucketServerPRActivity"
                    },
                    "type": "array"
                },
                "createdDate": {
                    "type": "number"
                },
                "id": {
                    "type": "number"
                },
                "parent": {
                    "properties": {
                        "id": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "permittedOperations": {
                    "properties": {
                        "deletable": {
                            "type": "boolean"
                        },
                        "editable": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "text": {
                    "type": "string"
                },
                "updatedDate": {
                    "type": "number"
                },
                "version": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "BitBucketServerPRDSL": {
            "description": "An exact copy of the PR's reference JSON. This interface has type'd the majority\nof it for tooling's sake, but any extra metadata which BitBucket Server send\nwill still be inside the JS object.",
            "properties": {
                "author": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/BitBucketServerPRParticipant"
                        },
                        {
                            "properties": {
                                "role": {
                                    "enum": [
                                        "AUTHOR"
                                    ],
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "description": "The creator of the PR"
                },
                "closed": {
                    "description": "Is the PR closed?",
                    "type": "boolean"
                },
                "createdDate": {
                    "description": "Date PR created as number of milliseconds since the unix epoch",
                    "type": "number"
                },
                "description": {
                    "description": "The text describing the PR",
                    "type": "string"
                },
                "fromRef": {
                    "$ref": "#/definitions/BitBucketServerMergeRef",
                    "description": "The PR submitter's reference"
                },
                "id": {
                    "description": "The PR's ID",
                    "type": "number"
                },
                "links": {
                    "description": "Misc links for hypermedia conformance",
                    "enum": [
                        "self"
                    ],
                    "type": "string"
                },
                "locked": {
                    "description": "Was this PR locked?",
                    "type": "boolean"
                },
                "open": {
                    "description": "Is the PR open?",
                    "type": "boolean"
                },
                "participants": {
                    "description": "People who have participated in the PR",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/BitBucketServerPRParticipant"
                            },
                            {
                                "properties": {
                                    "role": {
                                        "enum": [
                                            "PARTICIPANT"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        ]
                    },
                    "type": "array"
                },
                "reviewers": {
                    "description": "People requested as reviewers",
                    "items": {
                        "allOf": [
                            {
                                "$ref": "#/definitions/BitBucketServerPRParticipant"
                            },
                            {
                                "properties": {
                                    "role": {
                                        "enum": [
                                            "REVIEWER"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        ]
                    },
                    "type": "array"
                },
                "state": {
                    "description": "The pull request's current status.",
                    "enum": [
                        "DECLINED",
                        "MERGED",
                        "OPEN",
                        "SUPERSEDED"
                    ],
                    "type": "string"
                },
                "title": {
                    "description": "Title of the pull request.",
                    "type": "string"
                },
                "toRef": {
                    "$ref": "#/definitions/BitBucketServerMergeRef",
                    "description": "The repo Danger is running on"
                },
                "updatedDate": {
                    "description": "Date PR updated as number of milliseconds since the unix epoch",
                    "type": "number"
                },
                "version": {
                    "description": "The API version",
                    "type": "number"
                }
            },
            "type": "object"
        },
        "BitBucketServerPRParticipant": {
            "properties": {
                "approved": {
                    "description": "Did they approve of the PR?",
                    "type": "boolean"
                },
                "role": {
                    "description": "How did they contribute",
                    "enum": [
                        "AUTHOR",
                        "PARTICIPANT",
                        "REVIEWER"
                    ],
                    "type": "string"
                },
                "status": {
                    "description": "Their review feedback",
                    "enum": [
                        "APPROVED",
                        "NEEDS_WORK",
                        "UNAPPROVED"
                    ],
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/BitBucketServerUser"
                }
            },
            "type": "object"
        },
        "BitBucketServerRepo": {
            "description": "A BitBucket Server Repo",
            "properties": {
                "forkable": {
                    "description": "Can someone fork this repo?",
                    "type": "boolean"
                },
                "links": {
                    "$ref": "#/definitions/BitBucketServerLinks",
                    "description": "Links for the projects"
                },
                "name": {
                    "description": "The repo name",
                    "type": "string"
                },
                "project": {
                    "description": "An abstraction for grouping repos",
                    "properties": {
                        "id": {
                            "description": "The project unique id",
                            "type": "number"
                        },
                        "key": {
                            "description": "The project's human readable project key",
                            "type": "string"
                        },
                        "links": {
                            "description": "Hyperlinks for the project",
                            "enum": [
                                "self"
                            ],
                            "type": "string"
                        },
                        "name": {
                            "description": "The name of the project",
                            "type": "string"
                        },
                        "public": {
                            "description": "Is the project publicly available",
                            "type": "boolean"
                        },
                        "type": {
                            "description": "The project's type",
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "public": {
                    "description": "Is the repo public?",
                    "type": "boolean"
                },
                "scmId": {
                    "description": "The type of SCM tool, probably \"git\"",
                    "type": "string"
                },
                "slug": {
                    "description": "The slug for the repo",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "BitBucketServerUser": {
            "description": "A BitBucketServer user account.",
            "properties": {
                "active": {
                    "description": "Is the account active",
                    "type": "boolean"
                },
                "displayName": {
                    "description": "The name to use when referencing the user",
                    "type": "string"
                },
                "emailAddress": {
                    "description": "The email for the user",
                    "type": "string"
                },
                "id": {
                    "description": "The unique user ID",
                    "type": "number"
                },
                "name": {
                    "description": "The name of the user",
                    "type": "string"
                },
                "slug": {
                    "description": "The user's slug for URLs",
                    "type": "string"
                },
                "type": {
                    "description": "The type of a user, \"NORMAL\" being a typical user3",
                    "enum": [
                        "NORMAL",
                        "SERVICE"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CliArgs": {
            "description": "Describes the possible arguments that\ncould be used when calling the CLI",
            "properties": {
                "base": {
                    "description": "The base reference used by danger PR (e.g. not master)",
                    "type": "string"
                },
                "dangerfile": {
                    "description": "A custom path for the dangerfile (can also be a remote reference)",
                    "type": "string"
                },
                "externalCiProvider": {
                    "description": "Used by danger-js o allow having a custom CI",
                    "type": "string"
                },
                "id": {
                    "description": "So you can have many danger runs in one code review",
                    "type": "string"
                },
                "textOnly": {
                    "description": "Use SDTOUT instead of posting to the code review side",
                    "type": "string"
                },
                "verbose": {
                    "description": "For debugging",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DangerDSLJSONType": {
            "description": "The root of the Danger JSON DSL.",
            "properties": {
                "bitbucket_cloud": {
                    "$ref": "#/definitions/BitBucketCloudJSONDSL",
                    "description": "The data only version of BitBucket Cloud DSL"
                },
                "bitbucket_server": {
                    "$ref": "#/definitions/BitBucketServerJSONDSL",
                    "description": "The data only version of BitBucket Server DSL"
                },
                "git": {
                    "$ref": "#/definitions/GitJSONDSL",
                    "description": "The data only version of Git DSL"
                },
                "github": {
                    "$ref": "#/definitions/GitHubDSL",
                    "description": "The data only version of GitHub DSL"
                },
                "gitlab": {
                    "$ref": "#/definitions/GitLabDSL",
                    "description": "The data only version of GitLab DSL"
                },
                "settings": {
                    "description": "Used in the Danger JSON DSL to pass metadata between\nprocesses. It will be undefined when used inside the Danger DSL",
                    "properties": {
                        "cliArgs": {
                            "$ref": "#/definitions/CliArgs",
                            "description": "This is still a bit of a WIP, but this should\npass args/opts from the original CLI call through\nto the process."
                        },
                        "github": {
                            "description": "Saves each client re-implementing logic to grab these vars\nfor their API clients",
                            "properties": {
                                "accessToken": {
                                    "description": "API token for the GitHub client to use",
                                    "type": "string"
                                },
                                "additionalHeaders": {
                                    "description": "Optional headers to add to a request"
                                },
                                "baseURL": {
                                    "description": "Optional URL for enterprise GitHub",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Endpoint": {
            "properties": {
                "DEFAULTS": {
                    "$ref": "#/definitions/EndpointOptions",
                    "description": "Current default options"
                }
            },
            "type": "object"
        },
        "EndpointOptions": {
            "additionalProperties": {},
            "properties": {
                "baseUrl": {
                    "type": "string"
                },
                "data": {},
                "headers": {
                    "additionalProperties": {},
                    "type": "object"
                },
                "method": {
                    "enum": [
                        "DELETE",
                        "GET",
                        "HEAD",
                        "PATCH",
                        "POST",
                        "PUT"
                    ],
                    "type": "string"
                },
                "request": {
                    "additionalProperties": {},
                    "type": "object"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitCommit": {
            "description": "A platform agnostic reference to a Git commit",
            "properties": {
                "author": {
                    "$ref": "#/definitions/GitCommitAuthor",
                    "description": "Who wrote the commit"
                },
                "committer": {
                    "$ref": "#/definitions/GitCommitAuthor",
                    "description": "Who deployed the commit"
                },
                "message": {
                    "description": "The commit message",
                    "type": "string"
                },
                "parents": {
                    "description": "SHAs for the commit's parents",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "sha": {
                    "description": "The SHA for the commit",
                    "type": "string"
                },
                "tree": {
                    "description": "Potential parent commits, and other assorted metadata"
                },
                "url": {
                    "description": "Link to the commit",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitCommitAuthor": {
            "description": "An author of a commit",
            "properties": {
                "date": {
                    "description": "ISO6801 date string",
                    "type": "string"
                },
                "email": {
                    "description": "The authors email",
                    "type": "string"
                },
                "name": {
                    "description": "The display name for the author",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitHubAPIPR": {
            "description": "Provides the current PR in an easily used way for params in `github.api` calls",
            "properties": {
                "number": {
                    "description": "The PR number",
                    "type": "number"
                },
                "owner": {
                    "description": "The repo owner",
                    "type": "string"
                },
                "repo": {
                    "description": "The repo name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitHubCommit": {
            "description": "A GitHub specific implementation of a git commit, it has GitHub user names instead of an email.",
            "properties": {
                "author": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "The GitHub user who wrote the code"
                },
                "commit": {
                    "$ref": "#/definitions/GitCommit",
                    "description": "The raw commit metadata"
                },
                "committer": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "The GitHub user who shipped the code"
                },
                "parents": {
                    "description": "An array of parent commit shas",
                    "items": {},
                    "type": "array"
                },
                "sha": {
                    "description": "The SHA for the commit",
                    "type": "string"
                },
                "url": {
                    "description": "the url for the commit on GitHub",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitHubDSL": {
            "description": "The GitHub metadata for your PR",
            "properties": {
                "api": {
                    "$ref": "#/definitions/Octokit",
                    "description": "An authenticated API so you can extend danger's behavior by using the [GitHub v3 API](https://developer.github.com/v3/).\n\nA set up instance of the \"github\" npm module. You can get the full [API here](https://octokit.github.io/node-github/)."
                },
                "commits": {
                    "description": "The github commit metadata for a code review session",
                    "items": {
                        "$ref": "#/definitions/GitHubCommit"
                    },
                    "type": "array"
                },
                "issue": {
                    "$ref": "#/definitions/GitHubIssue",
                    "description": "The issue metadata for a code review session"
                },
                "pr": {
                    "$ref": "#/definitions/GitHubPRDSL",
                    "description": "The PR metadata for a code review session"
                },
                "requested_reviewers": {
                    "$ref": "#/definitions/GitHubReviewers",
                    "description": "The people/teams requested to review this PR"
                },
                "reviews": {
                    "description": "The reviews left on this pull request",
                    "items": {
                        "$ref": "#/definitions/GitHubReview"
                    },
                    "type": "array"
                },
                "thisPR": {
                    "$ref": "#/definitions/GitHubAPIPR",
                    "description": "The PR metadata specifically formatted for using with the GitHub API client"
                },
                "utils": {
                    "$ref": "#/definitions/GitHubUtilsDSL",
                    "description": "A scope for useful functions related to GitHub"
                }
            },
            "type": "object"
        },
        "GitHubIssue": {
            "description": "This is `danger.github.issue` It refers to the issue that makes up the Pull Request.\nGitHub treats all pull requests as a special type of issue. This DSL contains only parts of the issue that are\nnot found in the PR DSL, however it does contain the full JSON structure.\n\nA GitHub Issue",
            "properties": {
                "labels": {
                    "description": "The labels associated with this issue",
                    "items": {
                        "$ref": "#/definitions/GitHubIssueLabel"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GitHubIssueLabel": {
            "properties": {
                "color": {
                    "description": "The color associated with this label",
                    "type": "string"
                },
                "id": {
                    "description": "The identifying number of this label",
                    "type": "number"
                },
                "name": {
                    "description": "The name of the label",
                    "type": "string"
                },
                "url": {
                    "description": "The URL that links to this label",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitHubMergeRef": {
            "properties": {
                "label": {
                    "description": "The human display name for the merge reference, e.g. \"artsy:master\"",
                    "type": "string"
                },
                "ref": {
                    "description": "The reference point for the merge, e.g. \"master\"",
                    "type": "string"
                },
                "repo": {
                    "$ref": "#/definitions/GitHubRepo",
                    "description": "The repo from whch the reference comes from"
                },
                "sha": {
                    "description": "The reference point for the merge, e.g. \"704dc55988c6996f69b6873c2424be7d1de67bbe\"",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "The user that owns the merge reference e.g. \"artsy\""
                }
            },
            "type": "object"
        },
        "GitHubPRDSL": {
            "description": "An exact copy of the PR's reference JSON. This interface has type'd the majority\nof it for tooling's sake, but any extra metadata which GitHub send will still be\ninside the JS object.",
            "properties": {
                "additions": {
                    "description": "The number of additional lines in the PR",
                    "type": "number"
                },
                "assignee": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "The User who is assigned the PR"
                },
                "assignees": {
                    "description": "The Users who are assigned to the PR",
                    "items": {
                        "$ref": "#/definitions/GitHubUser"
                    },
                    "type": "array"
                },
                "author_association": {
                    "description": "How does the PR author relate to this repo/org?",
                    "enum": [
                        "COLLABORATOR",
                        "CONTRIBUTOR",
                        "FIRST_TIMER",
                        "FIRST_TIME_CONTRIBUTOR",
                        "MEMBER",
                        "NONE",
                        "OWNER"
                    ],
                    "type": "string"
                },
                "base": {
                    "$ref": "#/definitions/GitHubMergeRef",
                    "description": "Merge reference for _this_ repo."
                },
                "body": {
                    "description": "The markdown body message of the PR",
                    "type": "string"
                },
                "changed_files": {
                    "description": "The number of changed files in the PR",
                    "type": "number"
                },
                "closed_at": {
                    "description": "optional ISO6801 Date string for when PR was closed",
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "comments": {
                    "description": "The number of comments on the PR",
                    "type": "number"
                },
                "commits": {
                    "description": "The number of commits in the PR",
                    "type": "number"
                },
                "created_at": {
                    "description": "ISO6801 Date string for when PR was created",
                    "type": "string"
                },
                "deletions": {
                    "description": "The number of deleted lines in the PR",
                    "type": "number"
                },
                "head": {
                    "$ref": "#/definitions/GitHubMergeRef",
                    "description": "Merge reference for the _other_ repo."
                },
                "html_url": {
                    "description": "The link back to this PR as user-facing",
                    "type": "string"
                },
                "locked": {
                    "description": "Has the PR been locked to contributors only?",
                    "type": "boolean"
                },
                "merged": {
                    "description": "Has the PR been merged yet?",
                    "type": "boolean"
                },
                "merged_at": {
                    "description": "Optional ISO6801 Date string for when PR was merged.\nDanger probably shouldn't be running in this state.",
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "number": {
                    "description": "The UUID for the PR",
                    "type": "number"
                },
                "review_comments": {
                    "description": "The number of review-specific comments on the PR",
                    "type": "number"
                },
                "state": {
                    "description": "The state for the PR",
                    "enum": [
                        "closed",
                        "locked",
                        "merged",
                        "open"
                    ],
                    "type": "string"
                },
                "title": {
                    "description": "The title of the PR",
                    "type": "string"
                },
                "updated_at": {
                    "description": "ISO6801 Date string for when PR was updated",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "The User who submitted the PR"
                }
            },
            "type": "object"
        },
        "GitHubRepo": {
            "description": "A GitHub Repo",
            "properties": {
                "assignee": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "Is someone assigned to this PR?"
                },
                "assignees": {
                    "description": "Are there people assigned to this PR?",
                    "items": {
                        "$ref": "#/definitions/GitHubUser"
                    },
                    "type": "array"
                },
                "description": {
                    "description": "The textual description of the repo",
                    "type": "string"
                },
                "fork": {
                    "description": "Is the repo a fork?",
                    "type": "boolean"
                },
                "full_name": {
                    "description": "The full name of the owner + repo, e.g. \"Danger/Danger-JS\"",
                    "type": "string"
                },
                "html_url": {
                    "description": "The root web URL for the repo, e.g. https://github.com/artsy/emission",
                    "type": "string"
                },
                "id": {
                    "description": "Generic UUID",
                    "type": "number"
                },
                "name": {
                    "description": "The name of the repo, e.g. \"Danger-JS\"",
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "The owner of the repo"
                },
                "private": {
                    "description": "Is the repo publicly accessible?",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GitHubReview": {
            "description": "GitHubReview\nWhile a review is pending, it will only have a user.  Once a review is complete, the rest of\nthe review attributes will be present",
            "properties": {
                "body": {
                    "description": "If there is a review, the body of the review",
                    "type": "string"
                },
                "commit_id": {
                    "description": "If there is a review, the commit ID this review was made on",
                    "type": "string"
                },
                "id": {
                    "description": "If there is a review, this provides the ID for it",
                    "type": "number"
                },
                "state": {
                    "description": "The state of the review\nAPPROVED, REQUEST_CHANGES, COMMENT or PENDING",
                    "enum": [
                        "APPROVED",
                        "COMMENT",
                        "PENDING",
                        "REQUEST_CHANGES"
                    ],
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/GitHubUser",
                    "description": "The user requested to review, or the user who has completed the review"
                }
            },
            "type": "object"
        },
        "GitHubReviewers": {
            "properties": {
                "teams": {
                    "description": "Teams that have been requested",
                    "items": {},
                    "type": "array"
                },
                "users": {
                    "description": "Users that have been requested",
                    "items": {
                        "$ref": "#/definitions/GitHubUser"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GitHubUser": {
            "description": "A GitHub user account.",
            "properties": {
                "avatar_url": {
                    "description": "The url for a users's image",
                    "type": "string"
                },
                "href": {
                    "description": "The href for a users's page",
                    "type": "string"
                },
                "id": {
                    "description": "Generic UUID",
                    "type": "number"
                },
                "login": {
                    "description": "The handle for the user/org",
                    "type": "string"
                },
                "type": {
                    "description": "Whether the user is an org, or a user",
                    "enum": [
                        "Bot",
                        "Organization",
                        "User"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitHubUtilsDSL": {
            "description": "Useful functions for GitHub related work",
            "properties": {
                "createOrAddLabel": {
                    "description": "An API for creating, or setting a label to an issue. Usable from Peril\nby adding an additional param for settings about a repo.",
                    "type": "object"
                },
                "createOrUpdatePR": {
                    "type": "object"
                },
                "createUpdatedIssueWithID": {
                    "description": "An API for creating, updating and closing an issue. Basically\nthis is really useful for reporting back via a separate\nissue that you may want to keep up to date at all times.",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "GitJSONDSL": {
            "description": "The Git Related Metadata which is available inside the Danger DSL JSON",
            "properties": {
                "commits": {
                    "description": "The Git commit metadata",
                    "items": {
                        "$ref": "#/definitions/GitCommit"
                    },
                    "type": "array"
                },
                "created_files": {
                    "description": "Newly created filepaths relative to the git root",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "deleted_files": {
                    "description": "Removed filepaths relative to the git root",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "modified_files": {
                    "description": "Filepaths with changes relative to the git root",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "GitLabDSL": {
            "properties": {
                "commits": {
                    "items": {
                        "$ref": "#/definitions/GitLabMRCommit"
                    },
                    "type": "array"
                },
                "metadata": {
                    "$ref": "#/definitions/RepoMetaData"
                },
                "mr": {
                    "$ref": "#/definitions/GitLabMR"
                },
                "utils": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "GitLabMR": {
            "properties": {
                "allow_collaboration": {
                    "type": "boolean"
                },
                "allow_maintainer_to_push": {
                    "type": "boolean"
                },
                "approvals_before_merge": {
                    "type": "null"
                },
                "assignee": {
                    "$ref": "#/definitions/GitLabUser"
                },
                "author": {
                    "$ref": "#/definitions/GitLabUser"
                },
                "changes_count": {
                    "type": "string"
                },
                "closed_at": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "closed_by": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/GitLabUser"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "diff_refs": {
                    "properties": {
                        "base_sha": {
                            "type": "string"
                        },
                        "head_sha": {
                            "type": "string"
                        },
                        "start_sha": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "discussion_locked": {
                    "type": "null"
                },
                "diverged_commits_count": {
                    "type": "number"
                },
                "downvotes": {
                    "type": "number"
                },
                "first_deployed_to_production_at": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "force_remove_source_branch": {
                    "type": "boolean"
                },
                "id": {
                    "type": "number"
                },
                "iid": {
                    "type": "number"
                },
                "labels": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "latest_build_finished_at": {
                    "type": "string"
                },
                "latest_build_started_at": {
                    "type": "string"
                },
                "merge_commit_sha": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "merge_error": {
                    "type": "null"
                },
                "merge_status": {
                    "enum": [
                        "can_be_merged"
                    ],
                    "type": "string"
                },
                "merge_when_pipeline_succeeds": {
                    "type": "boolean"
                },
                "merged_at": {
                    "type": "string"
                },
                "merged_by": {
                    "$ref": "#/definitions/GitLabUser"
                },
                "milestone": {
                    "properties": {
                        "created_at": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "due_date": {
                            "type": "string"
                        },
                        "id": {
                            "type": "number"
                        },
                        "iid": {
                            "type": "number"
                        },
                        "project_id": {
                            "type": "number"
                        },
                        "start_date": {
                            "type": "string"
                        },
                        "state": {
                            "enum": [
                                "active",
                                "closed"
                            ],
                            "type": "string"
                        },
                        "title": {
                            "type": "string"
                        },
                        "updated_at": {
                            "type": "string"
                        },
                        "web_url": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "pipeline": {
                    "properties": {
                        "id": {
                            "type": "number"
                        },
                        "ref": {
                            "type": "string"
                        },
                        "sha": {
                            "type": "string"
                        },
                        "status": {
                            "enum": [
                                "canceled",
                                "failed",
                                "pending",
                                "running",
                                "skipped",
                                "success"
                            ],
                            "type": "string"
                        },
                        "web_url": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "project_id": {
                    "type": "number"
                },
                "rebase_in_progress": {
                    "type": "boolean"
                },
                "sha": {
                    "type": "string"
                },
                "should_remove_source_branch": {
                    "type": "boolean"
                },
                "source_branch": {
                    "type": "string"
                },
                "source_project_id": {
                    "type": "number"
                },
                "squash": {
                    "type": "boolean"
                },
                "state": {
                    "enum": [
                        "closed",
                        "locked",
                        "merged",
                        "opened"
                    ],
                    "type": "string"
                },
                "subscribed": {
                    "type": "boolean"
                },
                "target_branch": {
                    "type": "string"
                },
                "target_project_id": {
                    "type": "number"
                },
                "time_stats": {
                    "properties": {
                        "human_time_estimate": {
                            "type": [
                                "null",
                                "number"
                            ]
                        },
                        "human_total_time_spent": {
                            "type": [
                                "null",
                                "number"
                            ]
                        },
                        "time_estimate": {
                            "type": "number"
                        },
                        "total_time_spent": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "upvotes": {
                    "type": "number"
                },
                "user": {
                    "properties": {
                        "can_merge": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                },
                "user_notes_count": {
                    "type": "number"
                },
                "web_url": {
                    "type": "string"
                },
                "work_in_progress": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "GitLabMRCommit": {
            "properties": {
                "author_email": {
                    "type": "string"
                },
                "author_name": {
                    "type": "string"
                },
                "authored_date": {
                    "type": "string"
                },
                "committed_date": {
                    "type": "string"
                },
                "committer_email": {
                    "type": "string"
                },
                "committer_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "parent_ids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "short_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GitLabUser": {
            "properties": {
                "avatar_url": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "id": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "enum": [
                        "active",
                        "blocked"
                    ],
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "web_url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "JIRAIssue": {
            "description": "This is `danger.bitbucket_server.issues` It refers to the issues that are linked to the Pull Request.",
            "properties": {
                "key": {
                    "description": "The unique key for the issue e.g. JRA-11",
                    "type": "string"
                },
                "url": {
                    "description": "The user-facing URL for that issue",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Log": {
            "properties": {
                "debug": {
                    "type": "object"
                },
                "error": {
                    "type": "object"
                },
                "info": {
                    "type": "object"
                },
                "warn": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Octokit": {
            "properties": {
                "activity": {
                    "properties": {
                        "checkStarringRepo": {
                            "description": "Requires for the user to be authenticated.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteRepoSubscription": {
                            "description": "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](#set-a-repository-subscription).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteThreadSubscription": {
                            "description": "Mutes all future notifications for a conversation until you comment on the thread or get **@mention**ed.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getRepoSubscription": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getThread": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getThreadSubscription": {
                            "description": "This checks to see if the current user is subscribed to a thread. You can also [get a Repository subscription](https://developer.github.com/v3/activity/watching/#get-a-repository-subscription).,* ,* Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listEventsForOrg": {
                            "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listEventsForUser": {
                            "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listFeeds": {
                            "description": "GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:,* ,* *   **Timeline**: The GitHub global public timeline,* *   **User**: The public timeline for any user, using [URI template](https://developer.github.com/v3/#hypermedia),* *   **Current user public**: The public timeline for the authenticated user,* *   **Current user**: The private timeline for the authenticated user,* *   **Current user actor**: The private timeline for activity created by the authenticated user,* *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.,* *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.,* ,* **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://developer.github.com/v3/#basic-authentication) since current feed URIs use the older, non revocable auth tokens.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listNotifications": {
                            "description": "List all notifications for the current user, sorted by most recently updated.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listNotificationsForRepo": {
                            "description": "List all notifications for the current user.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicEvents": {
                            "description": "We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicEventsForOrg": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicEventsForRepoNetwork": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicEventsForUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReceivedEventsForUser": {
                            "description": "These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReceivedPublicEventsForUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listRepoEvents": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReposStarredByAuthenticatedUser": {
                            "description": "You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReposStarredByUser": {
                            "description": "You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReposWatchedByUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listStargazersForRepo": {
                            "description": "You can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listWatchedReposForAuthenticatedUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listWatchersForRepo": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "markAsRead": {
                            "description": "Marking a notification as \"read\" removes it from the [default view on GitHub](https://github.com/notifications).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "markNotificationsAsReadForRepo": {
                            "description": "Marking all notifications in a repository as \"read\" removes them from the [default view on GitHub](https://github.com/notifications).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "markThreadAsRead": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "setRepoSubscription": {
                            "description": "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](#delete-a-repository-subscription) completely.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "setThreadSubscription": {
                            "description": "This lets you subscribe or unsubscribe from a conversation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "starRepo": {
                            "description": "Requires for the user to be authenticated.,* ,* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unstarRepo": {
                            "description": "Requires for the user to be authenticated.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "apps": {
                    "properties": {
                        "addRepoToInstallation": {
                            "description": "Add a single repository to an installation. The authenticated user must have admin access to the repository.,* ,* You must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkAccountIsAssociatedWithAny": {
                            "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.,* ,* GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkAccountIsAssociatedWithAnyStubbed": {
                            "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.,* ,* GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createContentAttachment": {
                            "description": "Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://developer.github.com/v3/activity/events/types/#contentreferenceevent) to create an attachment.,* ,* The app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://developer.github.com/apps/using-content-attachments/)\" for details about content attachments.,* ,* You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.,* ,* This example creates a content attachment for the domain `https://errors.ai/`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createFromManifest": {
                            "description": "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createInstallationToken": {
                            "description": "Creates an access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token.,* ,* You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "findOrgInstallation": {
                            "description": "Enables an authenticated GitHub App to find the organization's installation information.,* ,* You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "findRepoInstallation": {
                            "description": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.,* ,* You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "findUserInstallation": {
                            "description": "Enables an authenticated GitHub App to find the user’s installation information.,* ,* You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getAuthenticated": {
                            "description": "Returns the GitHub App associated with the authentication credentials used.,* ,* You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getBySlug": {
                            "description": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).,* ,* If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getInstallation": {
                            "description": "You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listAccountsUserOrOrgOnPlan": {
                            "description": "Returns any accounts associated with a plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.,* ,* GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listAccountsUserOrOrgOnPlanStubbed": {
                            "description": "Returns any accounts associated with a plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.,* ,* GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listInstallationReposForAuthenticatedUser": {
                            "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.,* ,* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.,* ,* You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.,* ,* The access the user has to each repository is included in the hash under the `permissions` key.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listInstallations": {
                            "description": "You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.,* ,* The permissions the installation has are included under the `permissions` key.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listInstallationsForAuthenticatedUser": {
                            "description": "Lists installations in a repository that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.,* ,* You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.,* ,* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.,* ,* The permissions the installation has are included under the `permissions` key.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listMarketplacePurchasesForAuthenticatedUser": {
                            "description": "Returns only active subscriptions. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listMarketplacePurchasesForAuthenticatedUserStubbed": {
                            "description": "Returns only active subscriptions. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPlans": {
                            "description": "GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPlansStubbed": {
                            "description": "GitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listRepos": {
                            "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.,* ,* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.,* ,* You must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeRepoFromInstallation": {
                            "description": "Remove a single repository from an installation. The authenticated user must have admin access to the repository.,* ,* You must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "checks": {
                    "properties": {
                        "create": {
                            "description": "Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createSuite": {
                            "description": "By default, check suites are automatically created when you create a [check run](https://developer.github.com/v3/checks/runs/). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Set preferences for check suites on a repository](https://developer.github.com/v3/checks/suites/#set-preferences-for-check-suites-on-a-repository)\". Your GitHub App must have the `checks:write` permission to create check suites.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "description": "Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getSuite": {
                            "description": "Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listAnnotations": {
                            "description": "Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForRef": {
                            "description": "Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForSuite": {
                            "description": "Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listSuitesForRef": {
                            "description": "Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "rerequestSuite": {
                            "description": "Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://developer.github.com/v3/activity/events/types/#checksuiteevent) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.,* ,* To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "setSuitesPreferences": {
                            "description": "Changes the default automatic flow when creating check suites. By default, the CheckSuiteEvent is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://developer.github.com/v3/checks/suites/#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "codesOfConduct": {
                    "properties": {
                        "getConductCode": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getForRepo": {
                            "description": "This method returns the contents of the repository's code of conduct file, if one is detected.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listConductCodes": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "emojis": {
                    "properties": {
                        "get": {
                            "description": "Lists all the emojis available to use on GitHub.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "gists": {
                    "properties": {
                        "checkIsStarred": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "create": {
                            "description": "Allows you to add a new gist with one or more files.,* ,* **Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "fork": {
                            "description": "**Note**: This was previously `/gists/:gist_id/fork`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getRevision": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listComments": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCommits": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForks": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublic": {
                            "description": "List all public gists sorted by most recently updated to least recently updated.,* ,* Note: With [pagination](https://developer.github.com/v3/#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicForUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listStarred": {
                            "description": "List the authenticated user's starred gists:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "star": {
                            "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unstar": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "git": {
                    "properties": {
                        "createBlob": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createCommit": {
                            "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).,* ,* The `committer` section is optional and will be filled with the `author` data if omitted. If the `author` section is omitted, it will be filled in with the authenticated user's information and the current date.,* ,* Both the `author` and `committer` parameters have the same keys:,* ,* | name  | type   | description                                                                                                             |,* | ----- | ------ | ----------------------------------------------------------------------------------------------------------------------- |,* | name  | string | The name of the author (or committer) of the commit                                                                     |,* | email | string | The email of the author (or committer) of the commit                                                                    |,* | date  | string | Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. |,* ,* You can also provide an optional string `signature` parameter. This value will be added to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database.,* ,* **Note**: To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.,* ,* In this example, the payload that the signature is over would have been:,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createRef": {
                            "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createTag": {
                            "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://developer.github.com/v3/git/refs/#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://developer.github.com/v3/git/refs/#create-a-reference) the tag reference - this call would be unnecessary.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createTree": {
                            "description": "The tree creation API will take nested entries as well. If both a tree and a nested path modifying that tree are specified, it will overwrite the contents of that tree with the new path contents and write a new tree out.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteRef": {
                            "description": "Example: Deleting a branch:,* ,* ```,* DELETE /repos/octocat/Hello-World/git/refs/heads/feature-a,* ```,* ,* Example: Deleting a tag:,* ,* ```,* DELETE /repos/octocat/Hello-World/git/refs/tags/v1.0,* ```",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getBlob": {
                            "description": "The `content` in the response will always be Base64 encoded.,* ,* _Note_: This API supports blobs up to 100 megabytes in size.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCommit": {
                            "description": "Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getRef": {
                            "description": "Returns a branch or tag reference. Other than the [REST API](https://developer.github.com/v3/git/refs/#get-a-reference) it always returns a single reference. If the REST API returns with an array then the method responds with an error.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getTag": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getTree": {
                            "description": "If `truncated` in the response is `true`, the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, omit the `recursive` parameter, and fetch one sub-tree at a time. If you need to fetch even more items, you can clone the repository and iterate over the Git data locally.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listRefs": {
                            "description": "This will return an array of all the references on the system, including things like notes and stashes if they exist on the server",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateRef": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "gitignore": {
                    "properties": {
                        "getTemplate": {
                            "description": "The API also allows fetching the source of a single template.,* ,* Use the raw [media type](https://developer.github.com/v3/media/) to get the raw contents.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listTemplates": {
                            "description": "List all templates available to pass as an option when [creating a repository](https://developer.github.com/v3/repos/#create).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "hook": {
                    "type": "object"
                },
                "interactions": {
                    "properties": {
                        "addOrUpdateRestrictionsForOrg": {
                            "description": "Temporarily restricts interactions to certain GitHub users in any public repository in the given organization. You must be an organization owner to set these restrictions.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addOrUpdateRestrictionsForRepo": {
                            "description": "Temporarily restricts interactions to certain GitHub users within the given repository. You must have owner or admin access to set restrictions.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getRestrictionsForOrg": {
                            "description": "Shows which group of GitHub users can interact with this organization and when the restriction expires. If there are no restrictions, you will see an empty response.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getRestrictionsForRepo": {
                            "description": "Shows which group of GitHub users can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeRestrictionsForOrg": {
                            "description": "Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeRestrictionsForRepo": {
                            "description": "Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "issues": {
                    "properties": {
                        "addAssignees": {
                            "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.,* ,* This example adds two assignees to the existing `octocat` assignee.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addLabels": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkAssignee": {
                            "description": "Checks if a user has permission to be assigned to an issue in this repository.,* ,* If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.,* ,* Otherwise a `404` status code is returned.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "create": {
                            "description": "Any user with pull access to a repository can create an issue.,* ,* This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createComment": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createLabel": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createMilestone": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteLabel": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteMilestone": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "description": "The API returns a [`301 Moved Permanently` status](https://developer.github.com/v3/#http-redirects) if the issue was [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe to the [`issues`](https://developer.github.com/v3/activity/events/types/#issuesevent) webhook.,* ,* **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.,* ,* Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getEvent": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getLabel": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getMilestone": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.,* ,* Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listAssignees": {
                            "description": "Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listComments": {
                            "description": "Issue Comments are ordered by ascending ID.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCommentsForRepo": {
                            "description": "By default, Issue Comments are ordered by ascending ID.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listEvents": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listEventsForRepo": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listEventsForTimeline": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForAuthenticatedUser": {
                            "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.,* ,* Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForOrg": {
                            "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.,* ,* Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForRepo": {
                            "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.,* ,* Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listLabelsForMilestone": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listLabelsForRepo": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listLabelsOnIssue": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listMilestonesForRepo": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "lock": {
                            "description": "Users with push access can lock an issue or pull request's conversation.,* ,* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeAssignees": {
                            "description": "Removes one or more assignees from an issue.,* ,* This example removes two of three assignees, leaving the `octocat` assignee.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeLabel": {
                            "description": "Removes the specified label from the issue, and returns the remaining labels on the issue.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeLabels": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "replaceLabels": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unlock": {
                            "description": "Users with push access can unlock an issue's conversation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "Issue owners and users with push access can edit an issue.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateLabel": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateMilestone": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "licenses": {
                    "properties": {
                        "get": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getForRepo": {
                            "description": "This method returns the contents of the repository's license file, if one is detected.,* ,* Similar to [the repository contents API](https://developer.github.com/v3/repos/contents/#get-contents), this method also supports [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw license content or rendered license HTML.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "log": {
                    "$ref": "#/definitions/Log"
                },
                "markdown": {
                    "properties": {
                        "render": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "renderRaw": {
                            "description": "You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "meta": {
                    "properties": {
                        "get": {
                            "description": "This endpoint provides a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/).\",* ,* **Note**: We no longer support GitHub Services as of October 1, 2018, and GitHub Services will stop working on January 31, 2019. Please see the [blog post](/changes/2018-10-01-denying-new-github-services) for details. You can use the [Replacing GitHub Services guide](https://developer.github.com/v3/guides/replacing-github-services) to help you update your services to webhooks.,* ,* **Note**: We no longer support GitHub Services as of October 1, 2018, and GitHub Services will stop working on January 31, 2019. Please see the [blog post](/changes/2018-10-01-denying-new-github-services) for details. You can use the [Replacing GitHub Services guide](https://developer.github.com/v3/guides/replacing-github-services) to help you update your services to webhooks.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "migrations": {
                    "properties": {
                        "cancelImport": {
                            "description": "Stop an import for a repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteArchiveForAuthenticatedUser": {
                            "description": "Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [Get a list of user migrations](#get-a-list-of-user-migrations) and [Get the status of a user migration](#get-the-status-of-a-user-migration) endpoints, will continue to be available even after an archive is deleted.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteArchiveForOrg": {
                            "description": "Deletes a previous migration archive. Migration archives are automatically deleted after seven days.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getArchiveForAuthenticatedUser": {
                            "description": "Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:,* ,* *   attachments,* *   bases,* *   commit\\_comments,* *   issue\\_comments,* *   issue\\_events,* *   issues,* *   milestones,* *   organizations,* *   projects,* *   protected\\_branches,* *   pull\\_request\\_reviews,* *   pull\\_requests,* *   releases,* *   repositories,* *   review\\_comments,* *   schema,* *   users,* ,* The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getArchiveForOrg": {
                            "description": "Fetches the URL to a migration archive.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCommitAuthors": {
                            "description": "Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.,* ,* This API method and the \"Map a commit author\" method allow you to provide correct Git author information.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getImportProgress": {
                            "description": "View the progress of an import.,* ,* **Import status**,* ,* This section includes details about the possible values of the `status` field of the Import Progress response.,* ,* An import that does not have errors will progress through these steps:,* ,* *   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.,* *   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).,* *   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.,* *   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".,* *   `complete` - the import is complete, and the repository is ready on GitHub.,* ,* If there are problems, you will see one of these in the `status` field:,* ,* *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update Existing Import](#update-existing-import) section.,* *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://github.com/contact) for more information.,* *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update Existing Import](#update-existing-import) section.,* *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](#cancel-an-import) and [retry](#start-an-import) with the correct URL.,* *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update Existing Import](#update-existing-import) section.,* ,* **The project_choices field**,* ,* When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.,* ,* **Git LFS related fields**,* ,* This section includes details about Git LFS related fields that may be present in the Import Progress response.,* ,* *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.,* *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.,* *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.,* *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getLargeFiles": {
                            "description": "List files larger than 100MB found during the import",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getStatusForAuthenticatedUser": {
                            "description": "Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:,* ,* *   `pending` - the migration hasn't started yet.,* *   `exporting` - the migration is in progress.,* *   `exported` - the migration finished successfully.,* *   `failed` - the migration failed.,* ,* Once the migration has been `exported` you can [download the migration archive](#download-a-user-migration-archive).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getStatusForOrg": {
                            "description": "Fetches the status of a migration.,* ,* The `state` of a migration can be one of the following values:,* ,* *   `pending`, which means the migration hasn't started yet.,* *   `exporting`, which means the migration is in progress.,* *   `exported`, which means the migration finished successfully.,* *   `failed`, which means the migration failed.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForAuthenticatedUser": {
                            "description": "Lists all migrations a user has started.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForOrg": {
                            "description": "Lists the most recent migrations.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "mapCommitAuthor": {
                            "description": "Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "setLfsPreference": {
                            "description": "You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "startForAuthenticatedUser": {
                            "description": "Initiates the generation of a user migration archive.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "startForOrg": {
                            "description": "Initiates the generation of a migration archive.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "startImport": {
                            "description": "Start a source import to a GitHub repository using GitHub Importer.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unlockRepoForAuthenticatedUser": {
                            "description": "Unlocks a repository. You can lock repositories when you [start a user migration](#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://developer.github.com/v3/repos/#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unlockRepoForOrg": {
                            "description": "Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://developer.github.com/v3/repos/#delete-a-repository) when the migration is complete and you no longer need the source data.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateImport": {
                            "description": "An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.,* ,* Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array. You can select the project to import by providing one of the objects in the `project_choices` array in the update request.,* ,* The following example demonstrates the workflow for updating an import with \"project1\" as the project choice. Given a `project_choices` array like such:,* ,* To restart an import, no parameters are provided in the update request.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "oauthAuthorizations": {
                    "properties": {
                        "checkAuthorization": {
                            "description": "OAuth applications can use a special API method for checking OAuth token validity without running afoul of normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing it, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createAuthorization": {
                            "description": "If you need a small number of personal access tokens, implementing the [web flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/) can be cumbersome. Instead, tokens can be created using the OAuth Authorizations API using [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication). To create personal access tokens for a particular OAuth application, you must provide its client ID and secret, found on the OAuth application settings page, linked from your [OAuth applications listing on GitHub](https://github.com/settings/developers).,* ,* If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.,* ,* You can also create OAuth tokens through the web UI via the [personal access tokens settings](https://github.com/settings/tokens). Read more about these tokens on the [GitHub Help site](https://help.github.com/articles/creating-an-access-token-for-command-line-use).,* ,* Organizations that enforce SAML SSO require personal access tokens to be whitelisted. Read more about whitelisting tokens on the [GitHub Help site](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteAuthorization": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteGrant": {
                            "description": "Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getAuthorization": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getGrant": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getOrCreateAuthorizationForApp": {
                            "description": "This method will create a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getOrCreateAuthorizationForAppAndFingerprint": {
                            "description": "This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getOrCreateAuthorizationForAppFingerprint": {
                            "description": "This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listAuthorizations": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listGrants": {
                            "description": "You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "resetAuthorization": {
                            "description": "OAuth applications can use this API method to reset a valid OAuth token without end user involvement. Applications must save the \"token\" property in the response, because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing it, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "revokeAuthorizationForApplication": {
                            "description": "OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) for this method, where the username is the OAuth application `client_id` and the password is its `client_secret`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "revokeGrantForApplication": {
                            "description": "OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) for this method, where the username is the OAuth application `client_id` and the password is its `client_secret`. You must also provide a valid token as `:token` and the grant for the token's owner will be deleted.,* ,* Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateAuthorization": {
                            "description": "You can only send one of these scope keys at a time.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "orgs": {
                    "properties": {
                        "addOrUpdateMembership": {
                            "description": "Only authenticated organization owners can add a member to the organization or update the member's role.,* ,* *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](#get-organization-membership) will be `pending` until they accept the invitation.,*     ,* *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.,* ,* **Rate limits**,* ,* To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "blockUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkBlockedUser": {
                            "description": "If the user is blocked:,* ,* If the user is not blocked:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkMembership": {
                            "description": "Check if a user is, publicly or privately, a member of the organization.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkPublicMembership": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "concealMembership": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "convertMemberToOutsideCollaborator": {
                            "description": "When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createHook": {
                            "description": "Here's how you can create a hook that posts payloads in JSON format:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createInvitation": {
                            "description": "Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.,* ,* This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteHook": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "description": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getHook": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getMembership": {
                            "description": "In order to get a user's membership with an organization, the authenticated user must be an organization member.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getMembershipForAuthenticatedUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "description": "Lists all organizations, in the order that they were created on GitHub.,* ,* **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listBlockedUsers": {
                            "description": "List the users blocked by an organization.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForAuthenticatedUser": {
                            "description": "List organizations for the authenticated user.,* ,* **OAuth scope requirements**,* ,* This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForUser": {
                            "description": "List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.,* ,* This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List your organizations](#list-your-organizations) API instead.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listHooks": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listInvitationTeams": {
                            "description": "List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listMembers": {
                            "description": "List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listMemberships": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listOutsideCollaborators": {
                            "description": "List all users who are outside collaborators of an organization.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPendingInvitations": {
                            "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicMembers": {
                            "description": "Members of an organization can choose to have their membership publicized or not.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "pingHook": {
                            "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "publicizeMembership": {
                            "description": "The user can publicize their own membership. (A user cannot publicize the membership for another user.),* ,* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeMember": {
                            "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeMembership": {
                            "description": "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.,* ,* If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeOutsideCollaborator": {
                            "description": "Removing a user from this list will remove them from all the organization's repositories.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unblockUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "**Note:** The new `members_allowed_repository_creation_type` replaces the functionality of `members_can_create_repositories`.,* ,* Setting `members_allowed_repository_creation_type` will override the value of `members_can_create_repositories` in the following ways:,* ,* *   Setting `members_allowed_repository_creation_type` to `all` or `private` sets `members_can_create_repositories` to `true`.,* *   Setting `members_allowed_repository_creation_type` to `none` sets `members_can_create_repositories` to `false`.,* *   If you omit `members_allowed_repository_creation_type`, `members_can_create_repositories` is not modified.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateHook": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateMembership": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "paginate": {
                    "$ref": "#/definitions/Paginate"
                },
                "projects": {
                    "properties": {
                        "addCollaborator": {
                            "description": "Adds a collaborator to a an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createCard": {
                            "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.,* ,* Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createColumn": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForOrg": {
                            "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForRepo": {
                            "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteCard": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteColumn": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCard": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getColumn": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCards": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCollaborators": {
                            "description": "Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listColumns": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForOrg": {
                            "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForRepo": {
                            "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "moveCard": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "moveColumn": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeCollaborator": {
                            "description": "Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "reviewUserPermissionLevel": {
                            "description": "Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "**Note**: The status code may also be `401` or `410`, depending on the scope of the authenticating token.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateCard": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateColumn": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "pulls": {
                    "properties": {
                        "checkIfMerged": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "create": {
                            "description": "**Note:** To open a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open a pull request.,* ,* This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createComment": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.,* ,* **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) endpoint.,* ,* The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createCommentReply": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.,* ,* **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) endpoint.,* ,* The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createFromIssue": {
                            "description": "**Note:** To open a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open a pull request.,* ,* This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createReview": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.,* ,* **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request) endpoint.,* ,* The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createReviewRequest": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deletePendingReview": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteReviewRequest": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "dismissReview": {
                            "description": "**Note:** To dismiss a pull request review on a [protected branch](https://developer.github.com/v3/repos/branches/), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "description": "Lists details of a pull request by providing its number.,* ,* When you get, [create](https://developer.github.com/v3/pulls/#create-a-pull-request), or [edit](https://developer.github.com/v3/pulls/#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".,* ,* The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.,* ,* The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:,* ,* *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.,* *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.,* *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.,* ,* Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCommentsForReview": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getReview": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listComments": {
                            "description": "By default, review comments are ordered by ascending ID.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCommentsForRepo": {
                            "description": "By default, review comments are ordered by ascending ID.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCommits": {
                            "description": "Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [Commit List API](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listFiles": {
                            "description": "**Note:** The response includes a maximum of 300 files.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReviewRequests": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReviews": {
                            "description": "The list of reviews returns in chronological order.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "merge": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "submitReview": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "**Note:** To open a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open a pull request.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateReview": {
                            "description": "Update the review summary comment with new text.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "rateLimit": {
                    "properties": {
                        "get": {
                            "description": "**Note:** Accessing this endpoint does not count against your REST API rate limit.,* ,* **Understanding your rate limit status**,* ,* The Search API has a [custom rate limit](https://developer.github.com/v3/search/#rate-limit), separate from the rate limit governing the rest of the REST API. The GraphQL API also has a [custom rate limit](/v4/guides/resource-limitations/#rate-limit) that is separate from and calculated differently than rate limits in the REST API.,* ,* For these reasons, the Rate Limit API response categorizes your rate limit. Under `resources`, you'll see three objects:,* ,* *   The `core` object provides your rate limit status for all non-search-related resources in the REST API.,* *   The `search` object provides your rate limit status for the [Search API](https://developer.github.com/v3/search/).,* *   The `graphql` object provides your rate limit status for the [GraphQL API](/v4/).,* ,* For more information on the headers and values in the rate limit response, see \"[Rate limiting](https://developer.github.com/v3/#rate-limiting).\",* ,* The `rate` object (shown at the bottom of the response above) is deprecated.,* ,* If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "reactions": {
                    "properties": {
                        "createForCommitComment": {
                            "description": "Create a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForIssue": {
                            "description": "Create a reaction to an [issue](https://developer.github.com/v3/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForIssueComment": {
                            "description": "Create a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForPullRequestReviewComment": {
                            "description": "Create a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForTeamDiscussion": {
                            "description": "Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForTeamDiscussionComment": {
                            "description": "Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "description": "OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForCommitComment": {
                            "description": "List the reactions to a [commit comment](https://developer.github.com/v3/repos/comments/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForIssue": {
                            "description": "List the reactions to an [issue](https://developer.github.com/v3/issues/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForIssueComment": {
                            "description": "List the reactions to an [issue comment](https://developer.github.com/v3/issues/comments/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForPullRequestReviewComment": {
                            "description": "List the reactions to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForTeamDiscussion": {
                            "description": "List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForTeamDiscussionComment": {
                            "description": "List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "repos": {
                    "properties": {
                        "acceptInvitation": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addCollaborator": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.,* ,* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\",* ,* The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://developer.github.com/v3/repos/invitations/).,* ,* **Rate limits**,* ,* To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addDeployKey": {
                            "description": "Here's how you can create a read-only deploy key:,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addProtectedBranchAdminEnforcement": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addProtectedBranchRequiredSignatures": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addProtectedBranchRequiredStatusChecksContexts": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addProtectedBranchTeamRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Grants the specified teams push access for this branch. If you pass the `hellcat-preview` media type, you can also give push access to child teams.,* ,* | Type    | Description                                                                                                                         |,* | ------- | ----------------------------------------------------------------------------------------------------------------------------------- |,* | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addProtectedBranchUserRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Grants the specified people push access for this branch.,* ,* | Type    | Description                                                                                                            |,* | ------- | ---------------------------------------------------------------------------------------------------------------------- |,* | `array` | Usernames for people who can have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkCollaborator": {
                            "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.,* ,* If you pass the `hellcat-preview` media type, team members will include the members of child teams.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "compareCommits": {
                            "description": "Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`. For example:,* ,* ```,* GET /repos/:owner/:repo/compare/hubot:branchname...octocat:branchname,* ```,* ,* The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in reverse chronological order.,* ,* Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.,* ,* **Working with large comparisons**,* ,* The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [Commit List API](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository) to enumerate all commits in the range.,* ,* For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createCommitComment": {
                            "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createDeployment": {
                            "description": "Deployments offer a few configurable parameters with sane defaults.,* ,* The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request.,* ,* The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter makes it easier to track which environments have requested deployments. The default environment is `production`.,* ,* The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.,* ,* By default, [commit statuses](https://developer.github.com/v3/repos/statuses) for every submitted context must be in a `success` state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.,* ,* The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.,* ,* The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.,* ,* Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref:,* ,* A simple example putting the user and room into the payload to notify back to chat networks.,* ,* A more advanced example specifying required commit statuses and bypassing auto-merging.,* ,* This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.,* ,* This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success` status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createDeploymentStatus": {
                            "description": "Users with `push` access can create deployment statuses for a given deployment.,* ,* GitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createFile": {
                            "description": "Creates a new file in a repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createForAuthenticatedUser": {
                            "description": "**Note**: There are two endpoints for creating a repository: one to create a repository on a user account, and one to create a repository in an organization. The organization endpoint is fully enabled for [GitHub Apps](https://developer.github.com/v3/apps/available-endpoints/), whereas the user endpoint is enabled only for [user-to-server requests](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#user-to-server-requests).,* ,* **OAuth scope requirements**,* ,* When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:,* ,* *   `public_repo` scope or `repo` scope to create a public repository,* *   `repo` scope to create a private repository",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createFork": {
                            "description": "Create a fork for the authenticated user.,* ,* **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://github.com/contact).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createHook": {
                            "description": "Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can share the same `config` as long as those webhooks do not have any `events` that overlap.,* ,* **Note**: We no longer support GitHub Services as of October 1, 2018, and GitHub Services will stop working on January 31, 2019. Please see the [blog post](/changes/2018-10-01-denying-new-github-services) for details. You can use the [Replacing GitHub Services guide](https://developer.github.com/v3/guides/replacing-github-services) to help you update your services to webhooks.,* ,* Here's how you can create a hook that posts payloads in JSON format:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createInOrg": {
                            "description": "**Note**: There are two endpoints for creating a repository: one to create a repository on a user account, and one to create a repository in an organization. The organization endpoint is fully enabled for [GitHub Apps](https://developer.github.com/v3/apps/available-endpoints/), whereas the user endpoint is enabled only for [user-to-server requests](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#user-to-server-requests).,* ,* **OAuth scope requirements**,* ,* When using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:,* ,* *   `public_repo` scope or `repo` scope to create a public repository,* *   `repo` scope to create a private repository",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createRelease": {
                            "description": "Users with push access to the repository can create a release.,* ,* This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createStatus": {
                            "description": "Users with push access in a repository can create commit statuses for a given SHA.,* ,* Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "declineInvitation": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "description": "Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.,* ,* If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteCommitComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteDownload": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteFile": {
                            "description": "Deletes a file in a repository.,* ,* The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.,* ,* You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.,* ,* Both the `author` and `committer` parameters have the same keys:,* ,* | name  | type   | description                                          |,* | ----- | ------ | ---------------------------------------------------- |,* | name  | string | The name of the author (or committer) of the commit  |,* | email | string | The email of the author (or committer) of the commit |",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteHook": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteInvitation": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteRelease": {
                            "description": "Users with push access to the repository can delete a release.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteReleaseAsset": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "description": "The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getArchiveLink": {
                            "description": "Gets a redirect URL to download an archive for a repository. The `:archive_format` can be either `tarball` or `zipball`. The `:ref` must be a valid Git reference. If you omit `:ref`, the repository’s default branch (usually `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the `Location` header to make a second `GET` request.,* ,* _Note_: For private repositories, these links are temporary and expire after five minutes.,* ,* To follow redirects with curl, use the `-L` switch:,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getBranch": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getBranchProtection": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getClones": {
                            "description": "Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCodeFrequencyStats": {
                            "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCollaboratorPermissionLevel": {
                            "description": "Possible values for the `permission` key: `admin`, `write`, `read`, `none`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCombinedStatusForRef": {
                            "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.,* ,* The most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.,* ,* Additionally, a combined `state` is returned. The `state` is one of:,* ,* *   **failure** if any of the contexts report as `error` or `failure`,* *   **pending** if there are no statuses or a context is `pending`,* *   **success** if the latest status for all contexts is `success`",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCommit": {
                            "description": "Diffs with binary data will have no 'patch' property. Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCommitActivityStats": {
                            "description": "Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCommitComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getCommitRefSha": {
                            "description": "Users with read access can get the SHA-1 of a commit reference:,* ,* To access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:,* ,* ,* ,* To check if a remote reference's SHA-1 is the same as your local reference's SHA-1, make a `GET` request and provide the current SHA-1 for the local reference as the ETag.,* ,* The SHA-1 of the commit reference.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getContents": {
                            "description": "Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit `:path`, you will receive the contents of all files in the repository.,* ,* Files and symlinks support [a custom media type](#custom-media-types) for retrieving the raw content or rendered HTML (when supported). All content types support [a custom media type](#custom-media-types) to ensure the content is returned in a consistent object format.,* ,* **Note**:,* ,* *   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).,* *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://developer.github.com/v3/git/trees/#get-a-tree).,* *   This API supports files up to 1 megabyte in size.,* ,* The response will be an array of objects, one object for each item in the directory.,* ,* When listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value _should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \"submodule\".,* ,* If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the API responds with the content of the file (in the [format shown above](#response-if-content-is-a-file)).,* ,* Otherwise, the API responds with an object describing the symlink itself:,* ,* The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit.,* ,* If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the github.com URLs (`html_url` and `_links[\"html\"]`) will have null values.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getContributorsStats": {
                            "description": "*   `total` - The Total number of commits authored by the contributor.,* ,* Weekly Hash (`weeks` array):,* ,* *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).,* *   `a` - Number of additions,* *   `d` - Number of deletions,* *   `c` - Number of commits,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getDeployKey": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getDeployment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getDeploymentStatus": {
                            "description": "Users with pull access can view a deployment status for a deployment:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getDownload": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getHook": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getLatestPagesBuild": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getLatestRelease": {
                            "description": "View the latest published full release for the repository. Draft releases and prereleases are not returned by this endpoint.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getPages": {
                            "description": "Responses during the preview period contain two additional fields:,* ,* *   `html_url`: The absolute URL (with scheme) to the rendered site. For example, `https://username.github.io`.,* *   `source`: Information about the source branch and directory for the rendered site. The source field includes:,*     *   `branch`: The repo branch for [site source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/) For example, _master_ or _gh-pages_.,*     *   `path`: The repo directory from which the site publishes. Can be either `/` or `/docs`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getPagesBuild": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getParticipationStats": {
                            "description": "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.,* ,* The array order is oldest week (index 0) to most recent week.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getProtectedBranchAdminEnforcement": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getProtectedBranchPullRequestReviewEnforcement": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getProtectedBranchRequiredSignatures": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.,* ,* **Note**: You must enable branch protection to require signed commits.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getProtectedBranchRequiredStatusChecks": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getProtectedBranchRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* **Note**: Teams and users `restrictions` are only available for organization-owned repositories.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getPunchCardStats": {
                            "description": "Each array contains the day number, hour number, and number of commits:,* ,* *   `0-6`: Sunday - Saturday,* *   `0-23`: Hour of day,* *   Number of commits,* ,* For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getReadme": {
                            "description": "Gets the preferred README for a repository.,* ,* READMEs support [custom media types](#custom-media-types) for retrieving the raw content or rendered HTML.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getRelease": {
                            "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getReleaseAsset": {
                            "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getReleaseByTag": {
                            "description": "Get a published release with the specified tag.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getTopPaths": {
                            "description": "Get the top 10 popular contents over the last 14 days.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getTopReferrers": {
                            "description": "Get the top 10 referrers over the last 14 days.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getViews": {
                            "description": "Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.,* ,* The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listAssetsForRelease": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listBranches": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCollaborators": {
                            "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.,* ,* If you pass the `hellcat-preview` media type, team members will include the members of child teams.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCommentsForCommit": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCommitComments": {
                            "description": "Commit Comments use [these custom media types](#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).,* ,* Comments are ordered by ascending ID.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listCommits": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listContributors": {
                            "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.,* ,* GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listDeployKeys": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listDeploymentStatuses": {
                            "description": "Users with pull access can view deployment statuses for a deployment:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listDeployments": {
                            "description": "Simple filtering of deployments is available via query parameters:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listDownloads": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForOrg": {
                            "description": "List repositories for the specified org.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForUser": {
                            "description": "List public repositories for the specified user.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForks": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listHooks": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listInvitations": {
                            "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listInvitationsForAuthenticatedUser": {
                            "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listLanguages": {
                            "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPagesBuilds": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listProtectedBranchRequiredStatusChecksContexts": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listProtectedBranchTeamRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Lists the teams who have push access to this branch. If you pass the `hellcat-preview` media type, the list includes child teams.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listProtectedBranchUserRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Lists the people who have push access to this branch.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublic": {
                            "description": "This provides a dump of every public repository, in the order that they were created.,* ,* Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listReleases": {
                            "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://developer.github.com/v3/repos/#list-tags).,* ,* Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listStatusesForRef": {
                            "description": "Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.,* ,* This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listTags": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listTeams": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listTopics": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "merge": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "pingHook": {
                            "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeBranchProtection": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeCollaborator": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeDeployKey": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchAdminEnforcement": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchPullRequestReviewEnforcement": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchRequiredSignatures": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchRequiredStatusChecks": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchRequiredStatusChecksContexts": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Disables the ability to restrict who can push to this branch.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchTeamRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Removes the ability of a team to push to this branch. If you pass the `hellcat-preview` media type, you can include child teams.,* ,* | Type    | Description                                                                                                                                  |,* | ------- | -------------------------------------------------------------------------------------------------------------------------------------------- |,* | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProtectedBranchUserRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Removes the ability of a team to push to this branch.,* ,* | Type    | Description                                                                                                                            |,* | ------- | -------------------------------------------------------------------------------------------------------------------------------------- |,* | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "replaceProtectedBranchRequiredStatusChecksContexts": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "replaceProtectedBranchTeamRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. If you pass the `hellcat-preview` media type, you can include child teams.,* ,* | Type    | Description                                                                                                                         |,* | ------- | ----------------------------------------------------------------------------------------------------------------------------------- |,* | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users and teams in total is limited to 100 items. |",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "replaceProtectedBranchUserRestrictions": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.,* ,* | Type    | Description                                                                                                            |,* | ------- | ---------------------------------------------------------------------------------------------------------------------- |,* | `array` | Usernames for people who can have push access. **Note**: The list of users and teams in total is limited to 100 items. |",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "replaceTopics": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "requestPageBuild": {
                            "description": "You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.,* ,* Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "retrieveCommunityProfileMetrics": {
                            "description": "This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE, README, and CONTRIBUTING files.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "testPushHook": {
                            "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.,* ,* **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "transfer": {
                            "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "**Note**: To edit a repository's topics, use the [`topics` endpoint](#replace-all-topics-for-a-repository).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateBranchProtection": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Protecting a branch requires admin or owner permissions to the repository.,* ,* **Note**: Passing new arrays of `users` and `teams` replaces their previous values.,* ,* **Note**: The list of users and teams in total is limited to 100 items.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateCommitComment": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateFile": {
                            "description": "Updates a file in a repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateHook": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateInformationAboutPagesSite": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateInvitation": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateProtectedBranchPullRequestReviewEnforcement": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.,* ,* **Note**: Passing new arrays of `users` and `teams` replaces their previous values.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateProtectedBranchRequiredStatusChecks": {
                            "description": "Protected branches are available in public repositories with GitHub Free, and in public and private repositories with GitHub Pro, GitHub Team, and GitHub Enterprise Cloud. For more information, see [GitHub's billing plans](https://help.github.com/articles/github-s-billing-plans) in the GitHub Help documentation.,* ,* Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateRelease": {
                            "description": "Users with push access to the repository can edit a release.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateReleaseAsset": {
                            "description": "Users with push access to the repository can edit a release asset.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "uploadReleaseAsset": {
                            "description": "This endpoint makes use of [a Hypermedia relation](https://developer.github.com/v3/#hypermedia) to determine which URL to access. This endpoint is provided by a URI template in [the release's API response](#get-a-single-release). You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.,* ,* The asset data is expected in its raw binary form, rather than JSON. Everything else about the endpoint is the same as the rest of the API. For example, you'll still need to pass your authentication to be able to upload an asset.,* ,* Send the raw binary content of the asset as the request body.,* ,* This may leave an empty asset with a state of `\"new\"`. It can be safely deleted.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "request": {
                    "$ref": "#/definitions/Request"
                },
                "search": {
                    "properties": {
                        "code": {
                            "description": "Find file contents via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* **Note:** You must [authenticate](https://developer.github.com/v3/#authentication) to search for code across all public repositories.,* ,* **Considerations for code search**,* ,* Due to the complexity of searching code, there are a few restrictions on how searches are performed:,* ,* *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.,* *   Only files smaller than 384 KB are searchable.,* *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.,* ,* Suppose you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery). Your query would look something like this:,* ,* Here, we're searching for the keyword `addClass` within a file's contents. We're making sure that we're only looking in files where the language is JavaScript. And we're scoping the search to the `repo:jquery/jquery` repository.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "commits": {
                            "description": "Find commits via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* **Considerations for commit search**,* ,* Only the _default branch_ is considered. In most cases, this will be the `master` branch.,* ,* Suppose you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "issues": {
                            "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* Let's say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.,* ,* In this query, we're searching for the keyword `windows`, within any open issue that's labeled as `bug`. The search runs across repositories whose primary language is Python. We’re sorting by creation date in ascending order, so that the oldest issues appear first in the search results.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "issuesAndPullRequests": {
                            "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* Let's say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.,* ,* In this query, we're searching for the keyword `windows`, within any open issue that's labeled as `bug`. The search runs across repositories whose primary language is Python. We’re sorting by creation date in ascending order, so that the oldest issues appear first in the search results.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "labels": {
                            "description": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* Suppose you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:,* ,* The labels that best match for the query appear first in the search results.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "repos": {
                            "description": "Find repositories via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* Suppose you want to search for popular Tetris repositories written in Assembly. Your query might look like this.,* ,* You can search for multiple topics by adding more `topic:` instances, and including the `mercy-preview` header. For example:,* ,* In this request, we're searching for repositories with the word `tetris` in the name, the description, or the README. We're limiting the results to only find repositories where the primary language is Assembly. We're sorting by stars in descending order, so that the most popular repositories appear first in the search results.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "topics": {
                            "description": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.,* ,* Suppose you want to search for topics related to Ruby that are featured on [https://github.com/topics](https://github.com/topics). Your query might look like this:,* ,* In this request, we're searching for topics with the keyword `ruby`, and we're limiting the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.,* ,* **Note:** A search for featured Ruby topics only has 6 total results, so a [Link header](https://developer.github.com/v3/#link-header) indicating pagination is not included in the response.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "users": {
                            "description": "Find users via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).,* ,* When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](#text-match-metadata).,* ,* Imagine you're looking for a list of popular users. You might try out this query:,* ,* Here, we're looking at users with the name Tom. We're only interested in those with more than 42 repositories, and only if they have over 1,000 followers.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "teams": {
                    "properties": {
                        "addMember": {
                            "description": "The \"Add team member\" API (described below) is deprecated.,* ,* We recommend using the [Add team membership API](https://developer.github.com/v3/teams/members/#add-or-update-team-membership) instead. It allows you to invite new organization members to your teams.,* ,* To add a user to a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with, and the user being added must already be a member of at least one other team on the same organization.,* ,* Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\",* ,* If you attempt to add an organization to a team, you will get this:,* ,* If you attempt to add a user to a team and that user is not a member of at least one other team on the same organization, you will get this:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addOrUpdateMembership": {
                            "description": "If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a maintainer of the team.,* ,* If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.,* ,* If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a maintainer of the team.,* ,* If you attempt to add an organization to a team, you will get this:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addOrUpdateProject": {
                            "description": "Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "addOrUpdateRepo": {
                            "description": "To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization.,* ,* If you pass the `hellcat-preview` media type, you can modify repository permissions of child teams.,* ,* Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\",* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkManagesRepo": {
                            "description": "**Note**: If you pass the `hellcat-preview` media type, repositories inherited through a parent team will be checked.,* ,* You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "create": {
                            "description": "To create a team, the authenticated user must be a member of `:org`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createDiscussion": {
                            "description": "Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).,* ,* This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createDiscussionComment": {
                            "description": "Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).,* ,* This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "delete": {
                            "description": "To delete a team, the authenticated user must be a team maintainer or an owner of the org associated with the team.,* ,* If you are an organization owner and you pass the `hellcat-preview` media type, deleting a parent team will delete all of its child teams as well.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteDiscussion": {
                            "description": "Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteDiscussionComment": {
                            "description": "Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "get": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getDiscussion": {
                            "description": "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getDiscussionComment": {
                            "description": "Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getMember": {
                            "description": "The \"Get team member\" API (described below) is deprecated.,* ,* We recommend using the [Get team membership API](https://developer.github.com/v3/teams/members/#get-team-membership) instead. It allows you to get both active and pending memberships.,* ,* To list members in a team, the team must be visible to the authenticated user.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getMembership": {
                            "description": "If you pass the `hellcat-preview` media type, team members will include the members of child teams.,* ,* To get a user's membership with a team, the team must be visible to the authenticated user.,* ,* **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create team](https://developer.github.com/v3/teams#create-team).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listChild": {
                            "description": "At this time, the `hellcat-preview` media type is required to use this endpoint.,* ,*",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listDiscussionComments": {
                            "description": "List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listDiscussions": {
                            "description": "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listForAuthenticatedUser": {
                            "description": "List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://developer.github.com/apps/building-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listMembers": {
                            "description": "If you pass the `hellcat-preview` media type, team members will include the members of child teams.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPendingInvitations": {
                            "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listProjects": {
                            "description": "Lists the organization projects for a team. If you pass the `hellcat-preview` media type, the response will include projects inherited from a parent team.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listRepos": {
                            "description": "**Note**: If you pass the `hellcat-preview` media type, the response will include any repositories inherited through a parent team.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeMember": {
                            "description": "The \"Remove team member\" API (described below) is deprecated.,* ,* We recommend using the [Remove team membership API](https://developer.github.com/v3/teams/members/#remove-team-membership) instead. It allows you to remove both active and pending memberships.,* ,* To remove a user from a team, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. NOTE: This does not delete the user, it just removes them from the team.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeMembership": {
                            "description": "To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. NOTE: This does not delete the user, it just removes their membership from the team.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeProject": {
                            "description": "Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "removeRepo": {
                            "description": "If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "reviewProject": {
                            "description": "Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. If you pass the `hellcat-preview` media type, the response will include projects inherited from a parent team.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "update": {
                            "description": "To edit a team, the authenticated user must either be an owner of the org that the team is associated with, or a maintainer of the team.,* ,* **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateDiscussion": {
                            "description": "Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateDiscussionComment": {
                            "description": "Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "users": {
                    "properties": {
                        "addEmails": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "block": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkBlocked": {
                            "description": "If the user is blocked:,* ,* If the user is not blocked:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkFollowing": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "checkFollowingForUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createGpgKey": {
                            "description": "Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "createPublicKey": {
                            "description": "Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteEmails": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deleteGpgKey": {
                            "description": "Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "deletePublicKey": {
                            "description": "Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "follow": {
                            "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\",* ,* Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getAuthenticated": {
                            "description": "Lists public and private profile information when authenticated through basic auth or OAuth with the `user` scope.,* ,* Lists public profile information when authenticated through OAuth without the `user` scope.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getByUsername": {
                            "description": "Provides publicly available information about someone with a GitHub account.,* ,* The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).,* ,* The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://developer.github.com/v3/users/emails/)\".",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getContextForUser": {
                            "description": "Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.,* ,* The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getGpgKey": {
                            "description": "View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "getPublicKey": {
                            "description": "View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "list": {
                            "description": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.,* ,* Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listBlocked": {
                            "description": "List the users you've blocked on your personal account.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listEmails": {
                            "description": "Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listFollowersForAuthenticatedUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listFollowersForUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listFollowingForAuthenticatedUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listFollowingForUser": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listGpgKeys": {
                            "description": "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listGpgKeysForUser": {
                            "description": "Lists the GPG keys for a user. This information is accessible by anyone.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicEmails": {
                            "description": "Lists your publicly visible email address, which you can set with the [Toggle primary email visibility](#toggle-primary-email-visibility) endpoint. This endpoint is accessible with the `user:email` scope.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicKeys": {
                            "description": "Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "listPublicKeysForUser": {
                            "description": "Lists the _verified_ public SSH keys for a user. This is accessible by anyone.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "togglePrimaryEmailVisibility": {
                            "description": "Sets the visibility for your primary email addresses.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unblock": {
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "unfollow": {
                            "description": "Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        },
                        "updateAuthenticated": {
                            "description": "**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.",
                            "properties": {
                                "endpoint": {
                                    "$ref": "#/definitions/Endpoint"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "Paginate": {
            "properties": {
                "iterator": {
                    "type": "object"
                }
            },
            "type": "object"
        },
        "RepoMetaData": {
            "description": "Key details about a repo",
            "properties": {
                "pullRequestID": {
                    "description": "The ID for the pull/merge request \"11\"",
                    "type": "string"
                },
                "repoSlug": {
                    "description": "A path like \"artsy/eigen\"",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Request": {
            "properties": {
                "endpoint": {
                    "$ref": "#/definitions/Endpoint"
                }
            },
            "type": "object"
        }
    },
    "description": "The shape of the JSON passed between Danger and a subprocess. It's built\nto be expanded in the future.",
    "properties": {
        "danger": {
            "$ref": "#/definitions/DangerDSLJSONType"
        }
    },
    "type": "object"
}